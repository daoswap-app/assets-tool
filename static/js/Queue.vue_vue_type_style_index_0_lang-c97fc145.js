import{t as s}from"./___vite-browser-external_commonjs-proxy-1cc6769e.js";import{M as g,g as B,E as ot,a as F,w as M,T as lt}from"./web3-125a0c04.js";import{E as st}from"./ERC20_abi-801f43f8.js";import{I as Q,p as rt,c as $}from"./index-65f11d3b.js";import{g as ct,h as it}from"./chains-f720db1d.js";import{x as j,r as p,o as ut,a7 as W,aa as dt,y as b,z as mt,J as ft,H as k,I as n,P as m,u as r,A as c,O as d,M as C,L as E}from"./runtime-core.esm-bundler-c80a0204.js";const vt={style:{display:"flex","align-items":"left"}},_t={style:{display:"flex","align-items":"left"}},wt={style:{display:"flex","align-items":"left"}},pt={style:{display:"flex","align-items":"left"}},bt={style:{display:"flex","align-items":"left"}},ht={style:{display:"flex","align-items":"left"}},yt={style:{display:"flex","align-items":"left"}},gt={style:{"margin-left":"3px"}},kt=j({name:"TransactionsQueue"}),Wt=j({...kt,props:{connectedWallet:{type:Object,default:null},web3:{type:Object,default:null},currentWallet:{type:String,default:""}},setup(J){const t=J,K=new Q(st),q=new Q(g),f=p(!1),T=p([]),S=p(null),D=p(0),O=p(0),V=p(0),x=async()=>{f.value=!0;const i=B(g,t.currentWallet,t.web3);D.value=ot[t.connectedWallet.chainId],O.value=await t.web3.eth.getBlockNumber(),V.value=Math.ceil((O.value-D.value)/F),T.value=[];const a=(await i.methods.getTransactionIds(0).call()).map(async v=>{const l=await i.methods.getTransaction(v).call(),h=await i.methods.getTransactionConfirmationStatus(v,t.connectedWallet.address).call(),N=await t.web3.eth.getChainId();S.value=ct(it(parseInt(N)));let e=1,o="",P="",H=l.to,L=null,z=null;if(l.to.toLowerCase()===t.currentWallet.toLowerCase()){e=2;const u=l.data?q.decodeData(l.data):null;u&&(o=u.method)}else{e=1;const u=l.data?K.decodeData(l.data):null;if(P=S.value.token,L=M(l.value,t.web3),u){const _=lt[N].filter(y=>y.token.toLowerCase()===l.to.toLowerCase());o=u.method,P=_.length>0?_[0].symbol:S.value.token,H=u.inputs[0],L=M(new t.web3.utils.toBN(u.inputs[1].toString()),t.web3),z={to:u.inputs[0],value:M(new t.web3.utils.toBN(u.inputs[1].toString()),t.web3)}}}const R={id:v,destination:H,tokenSymbol:P,value:L,data:z,confirmations:l.confirmations,revokes:l.revokes,executeState:l.state,confirmStatus:h,type:e,methodName:o,events:[]};for(let u=0;u<V.value;u++){const _=D.value+F*u,y=_+(F-1),Y=await i.getPastEvents("TransactionCreated",{filter:{transactionId:v},fromBlock:_,toBlock:y}),Z=await i.getPastEvents("TransactionConfirmed",{filter:{transactionId:v},fromBlock:_,toBlock:y}),tt=await i.getPastEvents("TransactionRevoke",{filter:{transactionId:v},fromBlock:_,toBlock:y}),A=Y.concat(Z,tt);if(A.length>0){const et=A.map(async w=>{const at=await t.web3.eth.getTransaction(w.transactionHash),nt={eventName:w.event,...w.returnValues,transactionHash:w.transactionHash,blockNumber:w.blockNumber,from:at.from,createTime:rt(w.returnValues.createTime)};R.events.push(nt)});await Promise.all(et),R.events.sort($("blockNumber"))}}T.value.push(R)});await Promise.all(a),T.value.sort($("id")),f.value=!1};ut(()=>{t.connectedWallet&&t.web3&&t.currentWallet&&x()});const G=i=>{f.value=!0,B(g,t.currentWallet,t.web3).methods.confirmTransaction(i.id).send({from:t.connectedWallet.address}).then(async()=>{await x()}).catch(a=>{console.error(a)}).finally(()=>{f.value=!1})},U=i=>{f.value=!0,B(g,t.currentWallet,t.web3).methods.executeTransaction(i.id).send({from:t.connectedWallet.address}).then(async()=>{await x()}).catch(a=>{console.error(a)}).finally(()=>{f.value=!1})},X=i=>{f.value=!0,B(g,t.currentWallet,t.web3).methods.revokeTransaction(i.id).send({from:t.connectedWallet.address}).then(async()=>{await x()}).catch(a=>{console.error(a)}).finally(()=>{f.value=!1})};return(i,I)=>{const a=W("el-table-column"),v=W("el-table"),l=W("el-tag"),h=W("el-button"),N=dt("loading");return b(),mt("div",null,[ft((b(),k(v,{data:T.value,style:{width:"100%"}},{default:n(()=>[m(a,{type:"expand"},{default:n(e=>[m(v,{data:e.row.events,style:{width:"100%"}},{default:n(()=>[m(a,{label:r(s)("transaction.eventName")},{default:n(o=>[c("div",vt,[c("span",null,d(o.row.eventName?r(s)("transaction."+o.row.eventName):""),1)])]),_:1},8,["label"]),m(a,{label:r(s)("transaction.eventFrom")},{default:n(o=>[c("div",_t,[c("span",null,d(o.row.from),1)])]),_:1},8,["label"]),m(a,{label:r(s)("transaction.eventTransactionHash")},{default:n(o=>[c("div",wt,[c("span",null,d(o.row.transactionHash),1)])]),_:1},8,["label"]),m(a,{label:r(s)("transaction.eventCreateTime")},{default:n(o=>[c("div",pt,[c("span",null,d(o.row.createTime),1)])]),_:1},8,["label"])]),_:2},1032,["data"])]),_:1}),m(a,{label:r(s)("transaction.type")},{default:n(e=>[c("div",bt,[e.row.type==1?(b(),k(l,{key:0,type:"success"},{default:n(()=>[C(d(r(s)("transaction."+e.row.methodName)),1)]),_:2},1024)):E("",!0),e.row.type==2?(b(),k(l,{key:1,type:"warning"},{default:n(()=>[C(d(r(s)("transaction."+e.row.methodName)),1)]),_:2},1024)):E("",!0)])]),_:1},8,["label"]),m(a,{label:r(s)("transaction.destination")},{default:n(e=>[c("div",ht,[c("span",null,d(e.row.destination),1)])]),_:1},8,["label"]),m(a,{label:r(s)("transaction.value")},{default:n(e=>[c("div",yt,[c("span",null,d(e.row.value),1),c("span",gt,d(e.row.tokenSymbol),1)])]),_:1},8,["label"]),m(a,{label:r(s)("assets.operation")},{default:n(e=>[e.row.confirmStatus?E("",!0):(b(),k(h,{key:0,type:"primary",size:"small",onClick:o=>G(e.row)},{default:n(()=>[C(d(r(s)("transaction.btnConfirm")),1)]),_:2},1032,["onClick"])),m(h,{type:"primary",size:"small",onClick:o=>U(e.row)},{default:n(()=>[C(d(r(s)("transaction.btnExecute")),1)]),_:2},1032,["onClick"]),e.row.confirmStatus?E("",!0):(b(),k(h,{key:1,type:"danger",size:"small",onClick:o=>X(e.row)},{default:n(()=>[C(d(r(s)("transaction.btnRevoke")),1)]),_:2},1032,["onClick"]))]),_:1},8,["label"])]),_:1},8,["data"])),[[N,f.value]])])}}});export{Wt as _};
